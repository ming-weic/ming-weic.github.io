<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>my first blog</title>
    <url>/2024/02/24/my-first-blog/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p>个人博客的第一张帖子(😀</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p>测试</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><p>结束</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>DNS入门学习</title>
    <url>/2024/02/26/DNS%E5%AD%A6%E4%B9%A0_1/</url>
    <content><![CDATA[<h1 id="CNAME记录和A记录的区别"><a href="#CNAME记录和A记录的区别" class="headerlink" title="CNAME记录和A记录的区别"></a>CNAME记录和A记录的区别</h1><p><strong>一、什么是A记录</strong></p>
<p>A记录是DNS解析中最常见也是用途最广的一种DNS记录类型，它用于将域名指向对应的IP地址空间，通过添加A记录相当于告诉DNS系统，当用户输入域名时将其导向A记录所设置的服务器IP地址。如我们需要将<a href="http://www.example.com这个域名指向1.1.1.1这个ip地址,就需要添加一条a记录,即可完成域名与ip地址之间的绑定关系.需要注意的是a记录仅适用于ipv4地址解析,ipv6地址需要使用aaaa/">http://www.example.com这个域名指向1.1.1.1这个IP地址，就需要添加一条A记录，即可完成域名与IP地址之间的绑定关系。需要注意的是A记录仅适用于IPv4地址解析，IPv6地址需要使用AAAA</a> 记录。</p>
<p><strong>二、什么是CNAME记录？</strong></p>
<p>CNAME记录是DNS解析中另一种比较常见的记录类型，它与A记录不同，它代表的是主机名到主机名的映射。当我们想将域名指向另一个域名，而不是一个IP地址时，这时候就需要添加一条CNAME记录。比如，我们需要将<a href="http://www.example.com这个域名指向另外一个域名http//test.example.com%EF%BC%8C%E8%BF%99%E6%97%B6%E5%80%99%E5%B0%B1%E9%9C%80%E8%A6%81%E6%B7%BB%E5%8A%A0CNAME%E8%AE%B0%E5%BD%95%EF%BC%8C%E8%80%8C%E9%9D%9EA%E8%AE%B0%E5%BD%95%E3%80%82">http://www.example.com这个域名指向另外一个域名http://test.example.com，这时候就需要添加CNAME记录，而非A记录。</a></p>
<p>CNAME比较常见的应用场景是，一个公司拥有多个域名指向一个IP地址，如果IP地址发生变更，就需要针对每一个域名做A记录修改，不仅效率低，还容易出错。这种情况下，我们就可以使用其中一个域名或单独创建一个新的域名，将这个域名做一条A记录指向目标IP地址，然后将其他域名做CNAME记录指向该域名。当IP地址发生变更时，只需要对CNAME指向的域名做修改即可，而无需针对每一个域名做更改，这样就大幅提升了工作效率，降低了操作失误的风险。此外，CNAME记录还经常用于CDN、企业邮箱、全局流量管理的场景。</p>
<p><strong>三、A记录和CNAME记录的区别</strong></p>
<p>A记录和CNAME记录最终都是为了实现域名与服务器IP地之间的映射关系，但区别在于A记录直接将域名解析到一个IP地址，而CNAME记录则需要将域名解析到另外一个域名，然后由另外一个域名解析到IP地址。</p>
<p><strong>四、A记录和CNAME记录哪个更好？</strong></p>
<p>如果仅考虑网站的使用，两者之间没有太大的区别，一般情况下，如果没有太多的域名，只需要A记录就能实现域名解析效果。如果存在比较多的域名指向，采用CNAME记录能够实现域名解析的统一管理和修改，效率更高更便捷。另外CNAME记录的应用场景也更加广泛，很多服务商为了方便运维一般都建议用户使用CNAME记录绑定域名。</p>
<p>但从网站SEO的角度来看，CNAME记录也存在一些弊端，CNAME记录必须添加www或者其他前缀的域名，不能直接使用主域名做解析，这样就可能导致用户无法通过不含www的域名来访问网站，这对网站的SEO有一定影响。而A记录则不受这样的限制，在添加A记录时主机值填写“@”就能实现不含www的域名的解析。</p>
<p><strong>五、总结</strong><br>A记录和CNAME记录都能实现域名的解析效果，但各自作用和使用场景不尽相同，需要根据实际业务需求去做选择。</p>
]]></content>
      <categories>
        <category>计网</category>
      </categories>
      <tags>
        <tag>DNS</tag>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>自制麻将规则(无风牌)</title>
    <url>/2024/02/25/%E8%87%AA%E5%88%B6%E9%BA%BB%E5%B0%86%E8%A7%84%E5%88%99(%E6%97%A0%E9%A3%8E%E7%89%8C)/</url>
    <content><![CDATA[<br>
<font size = 4>结合了国标麻将和日本麻将的优点，一种攻守兼备的新麻将规则，参数如下~</font>

<br>
<font size = 6>1.番种表</font>
<center><font size = 4>普通番种</font></center>

<table>
<thead>
<tr>
<th align="center">番数</th>
<th align="left"><code>&lt;center&gt;</code>番种 <code>&lt;/center&gt;</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">1番</td>
<td align="left">明杠、暗杠、幺九刻、一色二连刻、老少副、一般高、二色同顺、连六、缺一门</td>
</tr>
<tr>
<td align="center">2番</td>
<td align="left">断幺九、双暗刻、双同刻(二色同刻)、平和、门前清、箭刻(中发白)、十二落抬(四副露)</td>
</tr>
<tr>
<td align="center">2番</td>
<td align="left">岭上开花、抢杠和、海底捞月、妙手回春</td>
</tr>
<tr>
<td align="center">3番</td>
<td align="left">不求人(门清自摸和)、全求人(四附露铳和)、碰碰和、三色同顺、花龙、双杠子、混带幺</td>
</tr>
<tr>
<td align="center">4番</td>
<td align="left">三色同刻、混一色、清龙、七对(不计门清)、纯带幺</td>
</tr>
<tr>
<td align="center">6番</td>
<td align="left">三暗刻、三色双龙会</td>
</tr>
<tr>
<td align="center">8番</td>
<td align="left">一色三同顺、一色三连刻、清一色</td>
</tr>
<tr>
<td align="center">10番</td>
<td align="left">十二金钗(三杠子)、混幺九、小三元</td>
</tr>
<tr>
<td align="center">12番</td>
<td align="left">一色四同顺、一色四连刻</td>
</tr>
</tbody></table>
<p>ps:同类番种不计子番、非子番型可叠加</p>
<center><font size = 4>役满番种</font></center>

<table>
<thead>
<tr>
<th align="center">分数</th>
<th><code>&lt;center&gt;</code>番种名 <code>&lt;/center&gt;</code></th>
</tr>
</thead>
<tbody><tr>
<td align="center">50</td>
<td>大三元、四暗刻、九莲宝灯、一色双龙会、十八罗汉(四杠子)、绿一色、清幺九、连七对、天和、地和</td>
</tr>
<tr>
<td align="center">70</td>
<td>纯正九莲宝灯、纯正绿一色、四暗刻单骑</td>
</tr>
</tbody></table>
<p>ps:役满牌型不计普通番种、只与役满牌型叠加</p>
<p><font size = 4>奖励番种 <code>&lt;/font&gt;</code></p>
<table>
<thead>
<tr>
<th>番数</th>
<th><code>&lt;center&gt;</code>名 <code>&lt;/center&gt;</code></th>
</tr>
</thead>
<tbody><tr>
<td>1番</td>
<td>宝牌、暗杠</td>
</tr>
</tbody></table>
<p>ps:此番种仅胡牌后有效</p>
<br>
<br>
<font size = 6>2.计分</font>

<table>
<thead>
<tr>
<th align="center">番数(F)</th>
<th align="center">分数(N)</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1-4</td>
<td align="center">F</td>
</tr>
<tr>
<td align="center">5-6</td>
<td align="center">F+2</td>
</tr>
<tr>
<td align="center">7-8</td>
<td align="center">F+3</td>
</tr>
<tr>
<td align="center">9-10</td>
<td align="center">F+5</td>
</tr>
<tr>
<td align="center">11-12</td>
<td align="center">F+8</td>
</tr>
<tr>
<td align="center">13-14</td>
<td align="center">F+12</td>
</tr>
<tr>
<td align="center">15-16</td>
<td align="center">F+17</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">40</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">50</td>
</tr>
</tbody></table>
<br>
<br>
<font size = 6>3.规则(无庄闲家)</font>

<ol>
<li>放铳支付2F点数、自摸另外三家每人支付F点数。</li>
<li>振听，不能胡自己牌河里的牌。</li>
<li>立直后不能改听，算一番。开杠多一张宝牌，立直胡牌后可开一张宝牌。</li>
<li>两番非奖励番起和</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>mahjong</tag>
        <tag>一个想法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库范式规范化</title>
    <url>/2024/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F%E8%A7%84%E8%8C%83%E5%8C%96/</url>
    <content><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p><strong>函数依赖：</strong></p>
<ul>
<li>函数依赖（Functional Dependency）表示在数据库表中的两个属性之间的关系，其中一个属性的值决定另一个属性的值。</li>
<li>用符号表示为 X -&gt; Y，其中 X 是决定属性 Y 的集合。</li>
</ul>
<p><strong>非平凡的函数依赖：</strong></p>
<ul>
<li>非平凡的函数依赖是指 X -&gt; Y，其中 Y 不包含于 X，这意味着 X 对 Y 有真正的函数依赖，而不是简单的平凡依赖。</li>
<li>如果Y包含于X，则称X对Y是平凡的函数依赖。</li>
</ul>
<p><strong>完全函数依赖：</strong></p>
<ul>
<li>完全函数依赖表示在属性组合 X 中的每个属性都对属性 Y 有函数依赖，而且没有 X 中的任何真子集可以决定 Y。</li>
<li>如果存在 X -&gt; Y，并且对于 X 中的每个属性子集 X’，X’ -&gt; Y 都不成立，则称 Y 对 X 具有完全函数依赖。</li>
</ul>
<p><strong>部分函数依赖：</strong></p>
<ul>
<li>部分函数依赖是指属性 Y 依赖于属性组合 X 中的一部分，而不是全部属性。换句话说，存在 X -&gt; Y 且存在 X’ 是 X 的真子集，X’ -&gt; Y 也成立。</li>
<li>部分函数依赖通常需要通过规范化来消除，以维护数据库的一致性。</li>
</ul>
<p><strong>传递依赖：</strong></p>
<ul>
<li>传递依赖发生在 X -&gt; Y 和 Y -&gt; Z 两个函数依赖条件下，其中 X -&gt; Z 成立。这意味着属性 Z 对属性 X 具有传递依赖。</li>
<li>传递依赖是规范化中的一个关键概念，通常需要考虑来减少数据表中的冗余和提高数据库的性能。</li>
</ul>
<p><strong>主属性和候选码：</strong></p>
<ul>
<li>主属性是包含在候选键（候选码）中的属性，这些属性能够唯一标识数据库表中的每个记录。</li>
<li>候选码是具有唯一性的属性组合，可以用来唯一标识表中的记录。</li>
</ul>
<p><strong>全码：</strong></p>
<ul>
<li>全码是指属性组合中包含了所有的属性，这些属性组合不仅是候选码，而且是全码，因为它们可以唯一标识表中的记录。</li>
</ul>
<h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><h3 id="第一范式-1NF-："><a href="#第一范式-1NF-：" class="headerlink" title="第一范式 (1NF)："></a><strong>第一范式 (1NF)：</strong></h3><p>第一范式是数据库中数据组织的最基本要求，它需要确保每个列的值都是不可再分的原子值，也就是每一列都不能包含多个值或数据的数组。</p>
<p><strong>条件：</strong></p>
<ul>
<li>每个列都必须包含原子值，不能包含重复的数据。</li>
<li>所有列都应该有唯一的列名，以避免歧义。<br><strong>缺点：</strong></li>
<li>数据冗余问题：因为每行都包含完整的数据，可能会导致数据冗余，增加存储需求。</li>
<li>更新异常：如果需要更新多行中的相同数据，必须确保更新所有行，否则会导致数据不一致性。</li>
</ul>
<h3 id="第二范式-2NF-："><a href="#第二范式-2NF-：" class="headerlink" title="第二范式 (2NF)："></a><strong>第二范式 (2NF)：</strong></h3><p>第二范式建立在第一范式的基础上，它要求表中需要消除非主属性对候选码的部分函数依赖。</p>
<p><strong>条件：</strong></p>
<ul>
<li>数据表必须符合第一范式。</li>
<li>所有非主键列必须完全依赖于主键。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>增加复杂性：在实践中，实现第二范式可能需要多个表，这增加了数据库查询的复杂性。</li>
<li>可能存在数据冗余问题，尤其是在多对多关系的情况下。</li>
</ul>
<h3 id="第三范式-3NF-："><a href="#第三范式-3NF-：" class="headerlink" title="第三范式 (3NF)："></a><strong>第三范式 (3NF)：</strong></h3><p>第三范式进一步规范了数据库表的设计，要求表中需要消除非主属性对候选码的传递函数依赖。</p>
<p><strong>条件：</strong></p>
<ul>
<li>数据表必须符合第一范式和第二范式。</li>
<li>非主键列之间不能相互依赖。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>数据冗余问题仍然可能存在，尤其在大型数据库中。</li>
<li>查询时需要多次连接表，可能影响性能。</li>
</ul>
<h3 id="巴斯-科德范式-BCNF-："><a href="#巴斯-科德范式-BCNF-：" class="headerlink" title="巴斯-科德范式 (BCNF)："></a><strong>巴斯-科德范式 (BCNF)：</strong></h3><p>BCNF是对第三范式的进一步规范，它强调了主键的重要性，消除主属性对候选码的部分和传递函数依赖。<br><strong>条件：</strong></p>
<ul>
<li>数据表必须符合第一范式和第二范式。</li>
<li>每个非主键列必须完全依赖于主键，而不是部分依赖。</li>
<li>主键之间不能存在函数依赖关系。<br><strong>缺点：</strong></li>
<li>可能需要进一步规范化数据，增加表的数量，复杂性以及查询的复杂性。</li>
<li>BCNF的目标是确保数据的完整性和一致性，通过消除部分依赖和传递依赖来减少数据冗余。</li>
</ul>
<p>###<strong>第四范式 (4NF)：</strong><br>第四范式是对多值依赖的规范化，它处理多个独立多值属性的情况。多值依赖指的是，一个表的某些列的值可以取多个值，而这些值与其他列的值无关。<br><strong>条件：</strong></p>
<ul>
<li>数据表必须符合BCNF。</li>
<li>表中的任何非主键列不可同时依赖于主键的任何一部分。<br><strong>缺点：</strong></li>
<li>需要更多的表和关联，可能增加复杂性。</li>
<li>第四范式的目标是处理多值依赖，确保数据表不包含重复信息，以保持数据库的一致性。</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
